---
import { render, type CollectionEntry } from "astro:content";
import {
	Tooltip,
	TooltipTrigger,
	TooltipContent,
} from "@/components/starwind/tooltip";
import { Button } from "@/components/starwind/button";
import { Dropdown, DropdownTrigger, DropdownContent, DropdownItem } from "@/components/starwind/dropdown";
import WFPScreenshots from "./card/WFPScreenshots.astro";
import { Picture } from "astro:assets";
import WFPImageStack from "./card/WFPImageStack.astro";
import type { ReleaseInfo } from "@/lib/github/release";
import { Icon } from "astro-icon/components";

interface Props {
	entry: CollectionEntry<"wfp-games">;
	releasesInfo?: ReleaseInfo;
}

const { entry, releasesInfo } = Astro.props as Props;
const { Content } = await render(entry);
---

<div
	id={entry.id}
	class="grid grid-cols-1 lg:grid-cols-2 rounded-2xl w-full bg-white shadow-lg overflow-clip border-1"
	style={`border-color: ${entry.data.color === "rgba(0, 0, 0, 0)" ? "#000" : entry.data.color}`}
>
	<WFPImageStack entry={entry} />
	<div class="flex flex-col w-auto">
		<h3 class="flex-none relative w-full">
			{
				entry.data.stripe ? (
					<Picture
						src={entry.data.stripe}
						alt={entry.data.title}
						formats={['avif', 'webp']}
						class="w-full h-[50px] object-cover"
					/>
				) : (
					<div
						class="w-full h-[50px]"
						style={`background-color: ${entry.data.color === "rgba(0, 0, 0, 0)" ? "#000" : entry.data.color}`}
					/>
				)
			}
			<a
				href=`#${entry.id}`
				class="absolute inset-0 flex items-center justify-center text-xl text-white drop-shadow-lg hover:underline"
			>
				{entry.data.title}
			</a>
			{
				releasesInfo && releasesInfo.new && (
					<span class="loader absolute z-1 top-[6px] right-[6px] bg-red-500"></span>
				)
			}
		</h3>
		{
			releasesInfo && (
				<div class="flex-none text-xs bg-blue-400 text-center font-bold text-white p-1">
					Updated {releasesInfo.upload_time} and downloaded {releasesInfo.download_count} times since
				</div>
			)
		}
		<div class="p-2 text-sm flex-auto">
	
			<div class="flex flex-row justify-between items-center">
				<div class="flex flex-col">
					<div class="flex flex-row">
						{
							entry.data.support.tooltip ? (
								<span> Supported version:&nbsp; </span>
								<Tooltip>
									<TooltipTrigger>
										<span class="font-bold underline decoration-dashed">
											{entry.data.support.version}
										</span>
									</TooltipTrigger>
									<TooltipContent side="bottom">
										{entry.data.support.tooltip}
									</TooltipContent>
								</Tooltip>
							) : (
								<p> Supported version:&nbsp; 
									<span class="font-bold">
										{entry.data.support.version}
									</span>
								</p>
							)
						}
					</div>
					<h4 class="font-bold text-md underline">Installation:</h4>
				</div>
				<div class="flex flex-row gap-2">
					{
						entry.data.icons && entry.data.icons.map((icon) => (
							<Tooltip>
								<TooltipTrigger>
									<a
										href={icon.url}
										target="_blank"
										class="hover:text-blue-500"
									>
										<Icon name={icon.name} class="h-8 w-8 fill-current" />
									</a>
								</TooltipTrigger>
								<TooltipContent side="left">
									{icon.tooltip}
								</TooltipContent>
							</Tooltip>
						))
					}
				</div>
			</div>
			<section
				class="prose text-sm line leading-none prose-a:text-blue-500"
			>
				<Content />
			</section>
		</div>
		<div
			class="flex-none p-2 pt-0 flex flex-row items-center justify-center"
		>
			<Button
				variant="warning"
				href={entry.data.download}
				target="_blank"
				class="rounded-r-none pr-[8px]"
			>
				<Icon name="download" class="fill-current" />Download
			</Button>
			{
				entry.data.downloads && (
					<Dropdown>
						<DropdownTrigger asChild>
							<Button variant="warning" class="rounded-l-none pl-[8px]"><Icon name="chevron-down" class="fill-current"/></Button>
						</DropdownTrigger>
						<DropdownContent>
						{
							entry.data.downloads.map((download)=>(
								<DropdownItem as="a" href={download.url} target="_blank">{download.name}</DropdownItem>
							))
						}
						</DropdownContent>
					</Dropdown>
				)
			}
			<WFPScreenshots entry={entry} />
		</div>
	</div>
</div>

<style>
.loader {
  width: 24px;
  height: 24px;
  display: inline-block;
  border-radius: 50%;
  box-sizing: border-box;
  animation: animloader 1s ease-in infinite;
}

@keyframes animloader {
  0% {
    transform: scale(0);
    opacity: 1;
  }
  100% {
    transform: scale(1);
    opacity: 0;
  }
} 
</style>